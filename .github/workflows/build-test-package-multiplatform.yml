name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
  pull_request:
    branches: [ "main" ]
    if: "!contains(github.event.pull_request.title, '[skip ci]')"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write  # Allow the action to push changes to the repository

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Check for version.txt
        id: version
        shell: bash
        run: |
          if [ ! -f version.txt ]; then
            echo "0.0.0" > version.txt
          fi
          VERSION=$(cat version.txt)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment Version (Cross-platform)
        id: increment_version
        shell: bash
        run: |
          VERSION=$(cat version.txt)
          IFS='.' read -r major minor patch <<< "$VERSION"
          patch=$((patch + 1))
          NEW_VERSION="$major.$minor.$patch"
          echo "$NEW_VERSION" > version.txt
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit Updated Version
        shell: bash
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

          # Stash any unstaged changes before pulling
          git stash || echo "No unstaged changes to stash"

          # Pull with rebase and handle conflicts
          git pull origin main --rebase || {
            echo "Rebase failed, aborting."
            git rebase --abort
            exit 1
          }

          git add version.txt
          git commit -m "Increment version to ${NEW_VERSION} [skip ci]" || echo "No changes to commit"

          # Retry push logic (compatible with both Bash and PowerShell)
          attempt=0
          while [ $attempt -lt 5 ]; do
            if git push origin main; then
              break
            else
              echo "Push failed, retrying..."
              git pull origin main --rebase || {
                echo "Rebase failed, aborting."
                git rebase --abort
                exit 1
              }
              attempt=$((attempt + 1))
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential cmake libsfml-dev libopenal-dev libglm-dev liblua5.3-dev
            git clone https://github.com/lsalzman/enet.git
            cd enet
            mkdir build && cd build
            cmake ..
            make
            sudo make install
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install mingw cmake sfml openal glm lua
            git clone https://github.com/lsalzman/enet.git
            cd enet
            mkdir build
            cd build
            cmake ..
            cmake --build .
          fi

      - name: Configure CMake
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_PREFIX_PATH="${{ matrix.os == 'windows-latest' && 'C:/ProgramData/chocolatey/lib/glm' || '/usr;/usr/local;/usr/include/glm' }}" \
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Package
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/package
          cp -r ${GITHUB_WORKSPACE}/build/bin/* ${GITHUB_WORKSPACE}/package/
          cd ${GITHUB_WORKSPACE}/package
          zip -r "release-v${NEW_VERSION}-${{ matrix.os }}.zip" .

      - name: Upload Package
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}
          path: ${GITHUB_WORKSPACE}/package/release-v${NEW_VERSION}-${{ matrix.os }}.zip
